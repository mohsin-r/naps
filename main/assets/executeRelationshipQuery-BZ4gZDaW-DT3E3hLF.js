import{kF as l,jE as y,ki as j,kG as F,L as R,kH as h}from"./main-KOPTRisL.js";function p(r,t){const e=r.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!t?.returnCountOnly?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=h(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function m(r,t,e){const a=await f(r,t,e),o=a.data,n=o.geometryType,s=o.spatialReference,c={};for(const d of o.relatedRecordGroups){const u={fields:void 0,objectIdFieldName:void 0,geometryType:n,spatialReference:s,hasZ:!!o.hasZ,hasM:!!o.hasM,features:d.relatedRecords};if(d.objectId!=null)c[d.objectId]=u;else for(const i of Object.keys(d))i!=="relatedRecords"&&(c[d[i]]=u)}return{...a,data:c}}async function b(r,t,e){const a=await f(r,t,e,{returnCountOnly:!0}),o=a.data,n={};for(const s of o.relatedRecordGroups)s.objectId!=null&&(n[s.objectId]=s.count);return{...a,data:n}}async function f(r,t,e={},a){const o=F({...r.query,f:"json",...a,...p(t,a)});return R(r.path+"/queryRelatedRecords",{...e,query:{...e.query,...o}})}async function I(r,t,e){t=l.from(t);const a=y(r);return m(a,t,e).then(o=>{const n=o.data,s={};return Object.keys(n).forEach(c=>s[c]=j.fromJSON(n[c])),s})}async function O(r,t,e){t=l.from(t);const a=y(r);return b(a,t,{...e}).then(o=>o.data)}export{I as executeRelationshipQuery,O as executeRelationshipQueryForCount};
